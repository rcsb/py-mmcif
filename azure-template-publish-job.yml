# File: azure-template-publish-job.yml
# Date: 8-Jul-2019 jdw split out from original pipeline
#
# Update:
#  6-Aug-2019 jdw push source wheels (universal) for linux
# 17-May-2021 jdw add
#
##
parameters:
  tox: ""
  python: ""
  os: "linux"
  fixtures: ""

jobs:
  - job: ${{ format('publish_{0}_{1}', parameters.tox, parameters.os) }}
    pool:
      ${{ if eq(parameters.os, 'macos') }}:
        vmImage: "macOS-latest"
      ${{ if eq(parameters.os, 'linux') }}:
        vmImage: "ubuntu-latest"
    dependsOn:
      - ${{ format('build_test_{0}_{1}', parameters.tox, parameters.os) }}
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    #
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: ${{ parameters.python }}
          addToPath: true
        displayName: setup python
      #
      - checkout: self
        submodules: true
        persistCredentials: true
      #
      - download: current
        artifact: ${{ format('sw_{0}_{1}', parameters.tox,  parameters.os) }}

      #- download: current
      #  artifact: ${{ format('sw_u_{0}_{1}', parameters.tox,  parameters.os) }}
      #
      - script: ls -lR $(Pipeline.Workspace)/${{ format('sw_{0}_{1}', parameters.tox, parameters.os) }}
        displayName: "Listing of downloaded artifacts"
      #
      - script: python -m pip install --upgrade pip twine setuptools wheel
        displayName: "Install packaging tools"
      #
      - task: DownloadSecureFile@1
        name: pypicred
        displayName: "Download PyPI credentials"
        inputs:
          secureFile: "PYPIRC-AZURE"

      - ${{ if startsWith(parameters.os, 'linux') }}:
          - script: twine upload --verbose --skip-existing -r pypi  --config-file $(pypicred.secureFilePath) $(Pipeline.Workspace)/${{ format('sw_{0}_{1}', parameters.tox, parameters.os) }}/*
            displayName: "Linux upload sdist and source wheel to PyPi ..."
            continueOnError: true
      #
      - ${{ if startsWith(parameters.os, 'macos') }}:
          - script: twine upload --verbose --skip-existing -r pypi  --config-file $(pypicred.secureFilePath) $(Pipeline.Workspace)/${{ format('sw_{0}_{1}', parameters.tox, parameters.os) }}/*
            displayName: "Mac upload sdist and binary wheel to PyPi ..."
            continueOnError: true
      #
      # Checkout and update documentation -
      - script: pip install -r requirements.txt
        displayName: "Install package dependencies"
      - script: pip install -e .
        displayName: "Install package locally"
      - script: pip install -r requirements-doc.txt
        displayName: "Install documentation dependencies"
      #
      #- script: |
      #    git config --global user.email "$env:GH_EMAIL"
      #    git config --global user.name "$env:GH_USER"
      #    git config --global credential.helper store
      #    echo https://$env:GH_TOKEN:x-oauth-basic@github.com>>~/.git-credentials
      #    mkdocs gh-deploy
      #  env:
      #    GH_USER: $(GH_USER)
      #    GH_EMAIL: $(GH_EMAIL)
      #    GH_TOKEN: $(GH_TOKEN)
      #    REPO_URL: $(BUILD_REPOSITORY_URI)
      #  displayName: "Build and deploy documentation to GitHub pages"
      ##
      #- script: |
      #    git config --global user.name "$env:GH_USER"
      #    git config --global user.email "$env:GH_EMAIL"
      #    echo "machine github.com login $env:GH_USER password $env:GH_TOKEN" > ~/.netrc
      #    mkdocs gh-deploy
      #  env:
      #    GH_USER: $(GH_USER)
      #    GH_EMAIL: $(GH_EMAIL)
      #    GH_TOKEN: $(GH_TOKEN)
      #    REPO_URL: $(BUILD_REPOSITORY_URI)
      #  displayName: "Build and deploy documentation to GitHub pages"
      ##
      #- script: |
      #    AUTH=$(echo -n ":$env:GH_TOKEN" | openssl base64 | tr -d '\n')
      #    git config --global user.name "$env:GH_USER"
      #    git config --global user.email "$env:GH_EMAIL"
      #    git config --global http.$env:REPO_URL/.extraHeader "Authorization: Basic $AUTH"
      #    mkdocs gh-deploy
      #  env:
      #    GH_USER: $(GH_USER)
      #    GH_EMAIL: $(GH_EMAIL)
      #    GH_TOKEN: $(GH_TOKEN)
      #    REPO_URL: $(BUILD_REPOSITORY_URI)
      #  displayName: "Build and deploy documentation to GitHub pages"

      - script: |
          AUTH=$(echo -n ":$env:GH_TOKEN" | openssl base64 | tr -d '\n')
          git config --global user.name "$env:GH_USER"
          git config --global user.email "$env:GH_EMAIL"
          git config --global http.$env:REPO_URL/.extraHeader "Authorization: Basic $AUTH"
          git branch -D gh-pages
          git checkout gh-pages
          git pull --rebase
          git checkout master
          mkdocs build --clean
          mkdocs gh-deploy
        env:
          GH_USER: $(GH_USER)
          GH_EMAIL: $(GH_EMAIL)
          GH_TOKEN: $(GH_TOKEN)
          REPO_URL: $(BUILD_REPOSITORY_URI)
        displayName: "Build and deploy documentation to GitHub pages"
